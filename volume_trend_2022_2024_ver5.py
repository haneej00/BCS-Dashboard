# -*- coding: utf-8 -*-
"""Volume_Trend_2022_2024_ver5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HImWqIvwQ2afwQ9i3YId9b9YzGc-M9hB
"""

# !pip install dask[complete] pandas plotly dash openpyxl

# 📊 Streamlit 대시보드: MCC별 Volume & Transaction 변화 + 6개월 단위 테이블

import streamlit as st
import pandas as pd
import plotly.graph_objs as go

# --------------------------
# 📁 파일 경로 (같은 디렉토리에 있어야 함)
file_path = '22-24 Jan-dec live accts exercise2.xlsx'

# --------------------------
# 📌 MCC 라벨 정의
mcc_labels = {
    7230: "Beauty Services", 5812: "Restaurants", 7216: "Dry Cleaning", 5499: "Specialty Foods",
    5999: "Misc. Retail", 7297: "Massage", 5691: "Clothing Stores", 8021: "Dentists", 8099: "Medical Services",
    5621: "Women's Apparel", 5814: "Fast Food", 8299: "Educational Services", 7538: "Auto Repair",
    5921: "Alcohol Stores", 4812: "Telecom Services", 5944: "Jewelry Stores", 5462: "Bakeries",
    5137: "Men’s Clothing", 5310: "Discount Stores", 5631: "Women's Accessories"
}
mcc_options = {"All MCCs": "all"} | {v: k for k, v in mcc_labels.items()}

# --------------------------
# 📊 데이터 로딩
@st.cache_data
def load_data():
    df = pd.read_excel(file_path, engine='openpyxl')
    return df

df = load_data()

# --------------------------
# 📌 컬럼 정의
vol_cols = [f'vol {year}{month:02d}' for year in range(2022, 2025) for month in range(1, 13)][:36]
trans_cols = [f'trans {year}{month:02d}' for year in range(2022, 2025) for month in range(1, 13)][:36]

# --------------------------
# 🎛️ MCC 선택 위젯
st.title("📊 MCC별 Volume & Transaction 변화 대시보드")
selected_label = st.selectbox("MCC 선택", list(mcc_options.keys()))
selected_mcc = mcc_options[selected_label]

# --------------------------
# 🔍 데이터 필터링
if selected_mcc == "all":
    df_filtered = df[vol_cols + trans_cols]
    title = "전체 MCC 평균"
else:
    df_filtered = df[df["MCC"] == selected_mcc][vol_cols + trans_cols]
    title = f"{selected_label} (MCC {selected_mcc})"

# --------------------------
# 📊 평균 계산
vol_avg = df_filtered[vol_cols].mean()
trans_avg = df_filtered[trans_cols].mean()
month_labels = [col.split()[-1] for col in vol_cols]

data = pd.DataFrame({
    'Month': pd.to_datetime(month_labels, format='%Y%m'),
    'Volume': vol_avg.values,
    'Transaction': trans_avg.values
}).sort_values('Month')

# --------------------------
# 📈 라인차트 출력
st.subheader("📈 월별 평균 추이")
fig = go.Figure()
fig.add_trace(go.Scatter(x=data['Month'], y=data['Volume'], mode='lines+markers', name='Volume', line=dict(color='black')))
fig.add_trace(go.Scatter(x=data['Month'], y=data['Transaction'], mode='lines+markers', name='Transaction', line=dict(color='blue')))
fig.update_layout(title=title + " - 월별 평균", xaxis_title='Month', yaxis_title='Average Value')
st.plotly_chart(fig, use_container_width=True)

# --------------------------
# 📋 6개월 단위 평균 테이블
st.subheader("📋 6개월 단위 평균 Volume")
data['Period'] = (data.index // 6) + 1
grouped = data.groupby('Period').agg({
    'Month': ['min', 'max'],
    'Volume': 'mean'
}).reset_index()
grouped.columns = ['Period', 'Start', 'End', 'AvgVolume']
grouped['Month Range'] = grouped['Start'].dt.strftime('%Y-%m') + ' ~ ' + grouped['End'].dt.strftime('%Y-%m')
grouped['Average Volume'] = grouped['AvgVolume'].apply(lambda x: f"{x:,.0f}")
st.table(grouped[['Month Range', 'Average Volume']])

# !pip install streamlit

import plotly.graph_objs as go

# --- 📈 Plotly 라인 차트 (컬러 + 스타일 지정) ---
st.subheader("📈 월별 평균 추이")

fig = go.Figure()
fig.add_trace(go.Scatter(
    x=data['Month'],
    y=data['Volume'],
    mode='lines+markers',
    name='Volume',
    line=dict(color='black')
))
fig.add_trace(go.Scatter(
    x=data['Month'],
    y=data['Transaction'],
    mode='lines+markers',
    name='Transaction',
    line=dict(color='blue')
))
fig.update_layout(
    title=title + " - 월별 평균 Volume & Transaction",
    xaxis_title='Month',
    yaxis_title='Average Value',
    height=500
)

st.plotly_chart(fig, use_container_width=True)

# --- 📋 6개월 단위 평균 테이블 ---
st.subheader("📋 6개월 단위 평균 Volume")

data["Period"] = (data.index // 6) + 1
summary = data.groupby("Period").agg(
    Start=("Month", "min"),
    End=("Month", "max"),
    AvgVolume=("Volume", "mean")
).reset_index()

summary["Period"] = summary["Start"].dt.strftime("%Y-%m") + " ~ " + summary["End"].dt.strftime("%Y-%m")
summary["AvgVolume"] = summary["AvgVolume"].apply(lambda x: f"{x:,.0f}")

st.table(summary[["Period", "AvgVolume"]].rename(columns={
    "Period": "Month Range",
    "AvgVolume": "Average Volume"
}))